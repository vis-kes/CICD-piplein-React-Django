name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8, 3.9, 3.10]  # Testing multiple Python versions

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with Flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Tests
      run: |
        python Computex/manage.py test

  deploy:
    needs: build  # Ensure deployment runs after successful build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to Elastic Beanstalk
      run: |
        pip install awsebcli
        eb init -p python-3.8 ${{ secrets.EB_APP_NAME }} --region ${{ secrets.AWS_REGION }}
        eb use ${{ secrets.EB_ENV_NAME }}
        eb deploy

  notify:
    runs-on: ubuntu-latest
    if: failure()  # Send notification only on failure
    steps:
    - name: Notify via Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
        SLACK_MESSAGE: 'Build ${{ job.status }} for ${{ github.repository }}'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
